This documentation explains how to run nginx container by creating its image using Dockerfile. Here, we are going to run nginx on port 80 in this container and expose it outside
the host using port mapping. 

In existing app container no changes are required, so as of now the app is running in port 9090. Now we need to prefix it with nginx reverse proxy.

Note: Copy the nginx config and place it in /app path in your host machine, because Dockerfile doesn't have access to file and directories that belong to other folder other than /app

# Updating the nginx.conf filw which was copied into /app directory
nginx.config
    include /etc/nginx/conf.d/*.conf;

    server {
    listen       80;
    listen       [::]:80;
    server_name  Public_IP_server;

    location / {
        proxy_pass http://172.17.0.2:9090;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

In above nginx.coonf, 172.17.0.2 is basically the IP of your app container. But how to get that? Use the below command to obtain the same. 

# Command to get the IP of containers
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' appcnt

# Configure Dockerfile for nginx container
vi myDockerfile
********************************************************************************************
# Use an official nginx image 
FROM nginx:1.19.2-alpine

# Create necessary directories and files, and set permissions and ownership
RUN mkdir -p /app/log/uwsgi && \
    touch /app/app.sock && \
    touch /app/log/uwsgi/sock.log && \
    chmod 777 /app && \
    chmod -R 777 /app/ && \
    chown -R nginx:nginx /app

# Copy Nginx configuration file
COPY nginx.conf /etc/nginx/nginx.conf

# Expose port 80
EXPOSE 80
********************************************************************************************

# Create docker image
docker build -t nginimg -f myDockerfile .

# Create docker container
docker run -d -p 80:80 --name ngincnt --link appcnt:app nginimg

                # here, docker run -d -p 80:80 --name mynginxcontainer --link myappcontainer:app nginimg
                # here, app is the alias created for myappcontainer so mynginxcontainer can communicate with myappcontainer.
docker ps

                # we need not to map port 9090 of nginx container to app container, because by default all the ports will be opened 
                  between the containers within the host. Hence, the traffic from host on port 80 will be forwarded to nginx container 
                  on port 80 which will then reach app container on port 9090, thereby the clients can access our application.

# Access your app from browser
http://publicIP:80
